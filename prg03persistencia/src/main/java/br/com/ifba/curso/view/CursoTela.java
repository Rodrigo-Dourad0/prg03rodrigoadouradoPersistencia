/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.curso.view;

import br.com.ifba.curso.entity.Curso;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author almei
 */
public class CursoTela extends javax.swing.JFrame {

    /**
     * Creates new form CursoTela
     */
    public CursoTela() {
        initComponents();
        carregarCursosNaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCursos = new javax.swing.JTable();
        btnRemover = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        txtPesquisar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnAdiconar = new javax.swing.JButton();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome", "ID", "Código", "Carga Horária", "Situação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCursos);

        btnRemover.setText("Remover ");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        txtPesquisar.setText("Pesquisar...");
        txtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnAdiconar.setText("Adicionar");
        btnAdiconar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdiconarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnAdiconar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdiconar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
             String idStr = JOptionPane.showInputDialog(this, "Informe o ID do curso a ser removido:");

    if (idStr == null || idStr.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID do curso não informado.");
            return;
        }

        try {
            Long idCurso = Long.parseLong(idStr.trim());

            int confirmacao = JOptionPane.showConfirmDialog(
                this,
                "Tem certeza que deseja remover o curso com ID '" + idCurso + "'?",
                "Confirmação",
                JOptionPane.YES_NO_OPTION
            );

            if (confirmacao == JOptionPane.YES_OPTION) {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("prg03persistencia");
                EntityManager em = emf.createEntityManager();

                Curso curso = em.find(Curso.class, idCurso);

                if (curso != null) {
                    em.getTransaction().begin();
                    em.remove(curso);
                    em.getTransaction().commit();
                    JOptionPane.showMessageDialog(this, "Curso removido com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(this, "Curso com ID '" + idCurso + "' não encontrado.");
                }

                em.close();
                emf.close();

                carregarCursosNaTabela();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID inválido! Informe um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao remover curso: " + e.getMessage());
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
       
       String idStr = JOptionPane.showInputDialog(this, "Informe o ID do curso a ser editado:");

    if (idStr == null || idStr.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "ID do curso não informado.");
        return;
    }

    try {
        Long idCurso = Long.parseLong(idStr.trim());

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("prg03persistencia");
        EntityManager em = emf.createEntityManager();

        Curso curso = em.find(Curso.class, idCurso);

        if (curso == null) {
            JOptionPane.showMessageDialog(this, "Curso com ID '" + idCurso + "' não encontrado.");
            em.close();
            emf.close();
            return;
        }

        // Criar campos preenchidos
        JTextField campoNome = new JTextField(curso.getNome());
        JTextField campoCodigo = new JTextField(curso.getCodigo());
        JTextField campoCargaHoraria = new JTextField(String.valueOf(curso.getCargaHoraria()));
        JCheckBox checkAtivo = new JCheckBox("Ativo");
        checkAtivo.setSelected(curso.isAtivo());

        Object[] campos = {
            "Nome:", campoNome,
            "Código do Curso:", campoCodigo,
            "Carga Horária:", campoCargaHoraria,
            "Situação:", checkAtivo
        };

        int opcao = JOptionPane.showConfirmDialog(
            this,
            campos,
            "Editar Curso ID " + idCurso,
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        if (opcao == JOptionPane.OK_OPTION) {
            String novoNome = campoNome.getText();
            String novoCodigo = campoCodigo.getText();
            String cargaStr = campoCargaHoraria.getText();
            boolean ativo = checkAtivo.isSelected();

            try {
                int novaCargaHoraria = Integer.parseInt(cargaStr);

                em.getTransaction().begin();
                curso.setNome(novoNome);
                curso.setCodigo(novoCodigo);
                curso.setCargaHoraria(novaCargaHoraria);
                curso.setAtivo(ativo);
                em.getTransaction().commit();

                JOptionPane.showMessageDialog(this, "Curso atualizado com sucesso!");
                carregarCursosNaTabela();

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Carga horária inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

        em.close();
        emf.close();

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "ID inválido! Informe um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao editar curso: " + e.getMessage());
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void txtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisarActionPerformed

    private void btnAdiconarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdiconarActionPerformed
    JTextField campoNome = new JTextField();
    JTextField campoCodigo = new JTextField();
    JTextField campoCargaHoraria = new JTextField();

    Object[] campos = {
        "Nome:", campoNome,
        "Código do Curso:", campoCodigo,
        "Carga Horária:", campoCargaHoraria
    };

    int opcao = JOptionPane.showConfirmDialog(
        null,
        campos,
        "Adicionar Novo Curso",
        JOptionPane.OK_CANCEL_OPTION,
        JOptionPane.PLAIN_MESSAGE
    );

    if (opcao == JOptionPane.OK_OPTION) {
        String nome = campoNome.getText();
        String codigo = campoCodigo.getText();
        String cargaStr = campoCargaHoraria.getText();

        try {
            int cargaHoraria = Integer.parseInt(cargaStr);

            Curso curso = new Curso();
            curso.setNome(nome);
            curso.setCodigo(codigo);
            curso.setCargaHoraria(cargaHoraria);
            curso.setAtivo(true);

            // PERSISTÊNCIA COM JPA
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("prg03persistencia");
            EntityManager em = emf.createEntityManager();

            em.getTransaction().begin();
            em.persist(curso);
            em.getTransaction().commit();

            em.close();
            emf.close();

            JOptionPane.showMessageDialog(null, "Curso salvo com sucesso!");
            carregarCursosNaTabela();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Carga horária inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar curso: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnAdiconarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String nomeBusca = txtPesquisar.getText().trim();

        if (nomeBusca.isEmpty() || nomeBusca.equalsIgnoreCase("Pesquisar...")) {
            // Se campo vazio ou padrão, carregar todos os cursos
            carregarCursosNaTabela();
            return;
        }

        try {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("prg03persistencia");
            EntityManager em = emf.createEntityManager();

            java.util.List<Curso> cursos = em.createQuery(
                "SELECT c FROM Curso c WHERE LOWER(c.nome) LIKE :nome", Curso.class)
                .setParameter("nome", "%" + nomeBusca.toLowerCase() + "%")
                .getResultList();

            // Limpar tabela
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblCursos.getModel();
            model.setRowCount(0);

            // Preencher tabela com resultados
            for (Curso curso : cursos) {
                Object[] row = {
                    curso.getNome(),
                    curso.getId(),
                    curso.getCodigo(),
                    curso.getCargaHoraria(),
                    curso.isAtivo() ? "Ativo" : "Inativo"
                };
                model.addRow(row);
            }

            em.close();
            emf.close();

            if (cursos.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nenhum curso encontrado para: " + nomeBusca);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar cursos: " + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed
    
    
    
    private void carregarCursosNaTabela() {
    try {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("prg03persistencia");
        EntityManager em = emf.createEntityManager();

        java.util.List<Curso> cursos = em.createQuery("FROM Curso", Curso.class).getResultList();

        // Limpar a tabela
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblCursos.getModel();
        model.setRowCount(0); // limpa as linhas

        // Adicionar os dados
        for (Curso curso : cursos) {
            Object[] row = {
                curso.getNome(),
                curso.getId(), // assumindo que Curso tem getId()
                curso.getCodigo(),
                curso.getCargaHoraria(),
                curso.isAtivo() ? "Ativo" : "Inativo"
            };
            model.addRow(row);
        }

        em.close();
        emf.close();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar cursos: " + e.getMessage());
    }
}

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CursoTela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdiconar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCursos;
    private javax.swing.JTextField txtPesquisar;
    // End of variables declaration//GEN-END:variables
}
