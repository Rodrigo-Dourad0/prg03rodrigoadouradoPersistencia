/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.curso.view;

import br.com.ifba.curso.controller.CursoController;
import br.com.ifba.curso.entity.Curso;
import java.awt.Color;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author almei
 */
public class CursoTela extends javax.swing.JFrame {

    /**
     * Creates new form CursoTela
     */
    public CursoTela() {
        initComponents();
        carregarCursosNaTabela();
        getContentPane().setBackground(new Color(126, 192, 238));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCursos = new javax.swing.JTable();
        btnRemover = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        txtPesquisar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnAdicionar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblCursos.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 153, 255)));
        tblCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome", "ID", "Código", "Carga Horária", "Situação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCursos.setSelectionForeground(new java.awt.Color(153, 255, 255));
        jScrollPane1.setViewportView(tblCursos);

        btnRemover.setText("Remover ");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        txtPesquisar.setText("Pesquisar...");
        txtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnAdicionar.setText("➕");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        jLabel1.setText("Adicionar Curso");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addGap(339, 339, 339)
                        .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(93, 93, 93)
                            .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar)
                    .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
            // Solicita ao usuário o ID do curso a ser removido
        String idStr = JOptionPane.showInputDialog(this, "Informe o ID do curso a ser removido:");

        // Verifica se o ID foi informado
        if (idStr == null || idStr.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID do curso não informado.");
            return;
        }

        try {
            Long idCurso = Long.parseLong(idStr.trim()); // Converte o ID para Long

            // Pede confirmação do usuário antes de remover o curso
            int confirmacao = JOptionPane.showConfirmDialog(
                this,
                "Tem certeza que deseja remover o curso com ID '" + idCurso + "'?",
                "Confirmação",
                JOptionPane.YES_NO_OPTION
            );

            if (confirmacao == JOptionPane.YES_OPTION) {
                CursoController controller = new CursoController(); // Instancia o controller
                Curso curso = controller.findById(idCurso); // Busca o curso pelo ID

                if (curso != null) {
                    controller.delete(curso); // Remove o curso do banco de dados
                    JOptionPane.showMessageDialog(this, "Curso removido com sucesso!");
                    carregarCursosNaTabela(); // Atualiza a tabela
                } else {
                    JOptionPane.showMessageDialog(this, "Curso com ID '" + idCurso + "' não encontrado.");
                }
            }

        } catch (NumberFormatException e) {
            // Caso o ID informado não seja um número válido
            JOptionPane.showMessageDialog(this, "ID inválido! Informe um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Trata outras exceções
            JOptionPane.showMessageDialog(this, "Erro ao remover curso: " + e.getMessage());
        }

    }//GEN-LAST:event_btnRemoverActionPerformed

    
    
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // Solicita ao usuário o ID do curso a ser editado
       String idStr = JOptionPane.showInputDialog(this, "Informe o ID do curso a ser editado:");

       // Verifica se o ID foi informado
       if (idStr == null || idStr.trim().isEmpty()) {
           JOptionPane.showMessageDialog(this, "ID do curso não informado.");
           return;
       }

       try {
           Long idCurso = Long.parseLong(idStr.trim()); // Converte o ID para Long

          CursoController controller = new CursoController(); // Instancia o controller
           Curso curso = controller.findById(idCurso); // Busca o curso pelo ID

           // Verifica se o curso foi encontrado
           if (curso == null) {
               JOptionPane.showMessageDialog(this, "Curso com ID '" + idCurso + "' não encontrado.");
               return;
           }

           // Cria os campos preenchidos com os dados atuais do curso
           JTextField campoNome = new JTextField(curso.getNome());
           JTextField campoCodigo = new JTextField(curso.getCodigo());
           JTextField campoCargaHoraria = new JTextField(String.valueOf(curso.getCargaHoraria()));
           JCheckBox checkAtivo = new JCheckBox("Ativo");
           checkAtivo.setSelected(curso.isAtivo());

           // Organiza os campos para exibição no JOptionPane
           Object[] campos = {
               "Nome:", campoNome,
               "Código do Curso:", campoCodigo,
               "Carga Horária:", campoCargaHoraria,
               "Situação:", checkAtivo
           };

           // Exibe o formulário de edição
           int opcao = JOptionPane.showConfirmDialog(
               this,
               campos,
               "Editar Curso ID " + idCurso,
               JOptionPane.OK_CANCEL_OPTION,
               JOptionPane.PLAIN_MESSAGE
           );

           if (opcao == JOptionPane.OK_OPTION) {
               // Lê os novos valores dos campos
               String novoNome = campoNome.getText();
               String novoCodigo = campoCodigo.getText();
               String cargaStr = campoCargaHoraria.getText();
               boolean ativo = checkAtivo.isSelected();

               try {
                   int novaCargaHoraria = Integer.parseInt(cargaStr); // Converte a carga horária

                   // Atualiza o objeto curso
                   curso.setNome(novoNome);
                   curso.setCodigo(novoCodigo);
                   curso.setCargaHoraria(novaCargaHoraria);
                   curso.setAtivo(ativo);

                   controller.update(curso); // Salva as alterações no banco 

                   JOptionPane.showMessageDialog(this, "Curso atualizado com sucesso!");
                   carregarCursosNaTabela(); // Atualiza a tabela

               } catch (NumberFormatException e) {
                   // Caso a carga horária não seja numérica
                   JOptionPane.showMessageDialog(this, "Carga horária inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
               }
           }

       } catch (NumberFormatException e) {
           // Caso o ID informado não seja um número válido
           JOptionPane.showMessageDialog(this, "ID inválido! Informe um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
       } catch (Exception e) {
           // Trata outras exceções
           JOptionPane.showMessageDialog(this, "Erro ao editar curso: " + e.getMessage());
       }

    }//GEN-LAST:event_btnEditarActionPerformed

    
    
    private void txtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisarActionPerformed

    
    
    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
           // Cria campos de entrada vazios
        JTextField campoNome = new JTextField();
        JTextField campoCodigo = new JTextField();
        JTextField campoCargaHoraria = new JTextField();

        // Agrupa os campos para exibição no JOptionPane
        Object[] campos = {
            "Nome:", campoNome,
            "Código do Curso:", campoCodigo,
            "Carga Horária:", campoCargaHoraria
        };

        // Exibe o formulário para adicionar um novo curso
        int opcao = JOptionPane.showConfirmDialog(
            null,
            campos,
            "Adicionar Novo Curso",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        if (opcao == JOptionPane.OK_OPTION) {
            // Lê os valores digitados pelo usuário
            String nome = campoNome.getText();
            String codigo = campoCodigo.getText();
            String cargaStr = campoCargaHoraria.getText();

            try {
                int cargaHoraria = Integer.parseInt(cargaStr); // Converte carga horária

                // Cria e preenche o novo curso
                Curso curso = new Curso();
                curso.setNome(nome);
                curso.setCodigo(codigo);
                curso.setCargaHoraria(cargaHoraria);
                curso.setAtivo(true); // Curso novo já começa como ativo

                CursoController controller = new CursoController(); // Instancia o controller
                controller.save(curso); // Salva o curso no banco de dados

                JOptionPane.showMessageDialog(null, "Curso salvo com sucesso!");
                carregarCursosNaTabela(); // Atualiza a tabela

            } catch (NumberFormatException e) {
                // Caso a carga horária não seja numérica
                JOptionPane.showMessageDialog(null, "Carga horária inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                // Trata outras exceções
                JOptionPane.showMessageDialog(null, "Erro ao salvar curso: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnAdicionarActionPerformed

    
    
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // Obtém o texto digitado no campo de pesquisa
        String nomeBusca = txtPesquisar.getText().trim();

        // Se o campo estiver vazio ou com o texto padrão, carrega todos os cursos
        if (nomeBusca.isEmpty() || nomeBusca.equalsIgnoreCase("Pesquisar...")) {
            carregarCursosNaTabela(); 
            return;
        }

        try {
            CursoController controller = new CursoController(); // Instancia o controller
            List<Curso> cursos = controller.findByNome(nomeBusca); // Busca cursos pelo nome

            // Limpa as linhas da tabela
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblCursos.getModel();
            model.setRowCount(0);

            // Adiciona os cursos encontrados à tabela
            for (Curso curso : cursos) {
                Object[] row = {
                    curso.getNome(),
                    curso.getId(),
                    curso.getCodigo(),
                    curso.getCargaHoraria(),
                    curso.isAtivo() ? "Ativo" : "Inativo" // Converte boolean para texto
                };
                model.addRow(row); // Adiciona a linha à tabela
            }

            // Exibe mensagem caso nenhum curso seja encontrado
            if (cursos.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nenhum curso encontrado para: " + nomeBusca);
            }

        } catch (Exception e) {
            // Exibe mensagem de erro, caso ocorra exceção na busca
            JOptionPane.showMessageDialog(this, "Erro ao buscar cursos: " + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed
    
    
    
private void carregarCursosNaTabela() {
    try {
        CursoController controller = new CursoController();
        java.util.List<Curso> cursos = controller.findAll();

        // Limpar a tabela
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblCursos.getModel();
        model.setRowCount(0); // limpa as linhas

        // Adicionar os dados
        for (Curso curso : cursos) {
            Object[] row = {
                curso.getNome(),
                curso.getId(),
                curso.getCodigo(),
                curso.getCargaHoraria(),
                curso.isAtivo() ? "Ativo" : "Inativo"
            };
            model.addRow(row);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar cursos: " + e.getMessage());
    }
}

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CursoTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CursoTela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCursos;
    private javax.swing.JTextField txtPesquisar;
    // End of variables declaration//GEN-END:variables
}
